Notes on JAVA METHODS()
========================

==>No other special characters are allowed in a method name except the _ (underscore) & the $ (dolor sign);
==>Unlike Java statements such as if, while, and for, the method body requires you to use the braces even if 
   the body consists of only one statement.
==>Class variables must be static if you intend to access them from static methods.
==>The declaration for the playARound method marks the method as static so that the static main method can call it.
==>The return type of a method can be any of Java’s primitive types (int,long,float,char,short,byte,double,boolean)
==>The return type can be a reference type, including a class defined by the API such as String or a class you create yourself
==>When you specify a return type other than void in a method declaration, the body of the method must include a return statement that specifies the value to be returned

==>You can use a method that returns a value in an assignment statement e.g (int number = getRandomNumber();)
==>You can also use methods that return values in expressions(number = getRandomNumber() * 10;)
==>If a method declares a return type other than void, it must use a return statement to return a value

Scoping out parameters
-------------------------
==> The scope of a parameter is the method for which the parameter is declared
==> A parameter can have the same name as local variables used in other methods
    without causing any conflict.
    
    
Understanding pass-by-value.....(ChangeParameters.java)
-------------------------------------------------------
==>When Java passes a variable to a method via a parameter, the method itself receives
   a copy of the variable’s value, not the variable itself.

==>This copy is called a passby-value, and it has an important consequence: If a method changes the value it
   receives as a parameter, that change is not reflected in the original variable that
   was passed to the method.

GuessingGameMethod2.java Notes
===============================
→11 The start of the do loop in the main method. Each cycle of this do loop
plays one round of the game. The do loop continues until the user
indicates that he or she wants to stop playing.

→13 Calls the playARound method to play one round of the game.

→14 Calls the askForAnotherRound method to determine whether the user
wants to play another round. The boolean return value from this method
is used as the expression for the do loop. Thus, the do loop repeats if the
askForAnotherRound method returns true.

→18 The start of the playARound method.

→25 Calls the getRandomNumber method to get a random number between
1 and 10. The value returned by this method is stored in the number
variable.

→31 Calls the getGuess method to get the user’s guess. This method returns a
number between 1 and 10, which is stored in the guess variable.

→41 The start of the getRandomNumber method, which indicates that this
method returns an int value.

→43 The return statement for the getRandomNumber method. The random
number is calculated using the Math.random method, and the result of
this calculation is returned as the value of the getRandomNumber method.

→46 The start of the getGuess method, which indicates that this method
returns an int value.

→48 The getGuess method uses a while loop, which exits only when the user
enters a number between 1 and 10.

→57 The return statement for the getGuess method. Note that this return
statement is in the else part of an if statement that checks whether
the number is less than 1 or greater than 10. If the number is outside the
acceptable range, the return statement isn’t executed. Instead, the
program displays an error message, and the while loop repeats.

→61 The start of the askForAnotherRound method, which returns a boolean
value.

→63 The askForAnotherRound method, which uses a while loop that exits
only when the user enters a valid Y or N response.

→69 The askForAnotherRound method, which returns true if the user enters
Y or y.

→71 The askForAnotherRound method, which returns false if the user
enters N or n.

   
Methods passing parameters around......(GuessingGameMethod3.java)
-----------------------------------------------------------------
»»playARound: This method plays one round of the guessing game. It doesn’t
  return a value, but it accepts two arguments, min and max, that indicate the
  minimum and maximum values for the number to be guessed.
»»getRandomNumber: This method returns a random number between min and
  max values passed as parameters.
»»getGuess: This method also accepts two parameters, min and max, to limit the
  range within which the user must guess.
»»askForAnotherRound: This method asks the user to play another round and
  returns a boolean value to indicate whether the user wants to continue
  playing. It accepts a String value as a parameter; this string is displayed on
  the console to prompt the user for a reply.
  
→13 This line calls the playARound method to play one round of the game.
	The values for min and max are passed as literals. To add a small amount
	of variety to the game, the getRandomNumber method is called here to set
	the value for the max to a random number from 7 to 12.
→25 The call to the getRandomNumber method passes the values of min and
	max as parameters to set the range for the random numbers.
→29 The message that announces to the user that the computer has chosen a
	random number uses the min and max parameters to indicate the range.
→31 The call to the getGuess method now passes the range of acceptable
	guesses to the getGuess method.
→41 The declaration for the getRandomNumber method specifies the min and
	max parameters.
→43 The calculation for the random number is complicated a bit by the fact
	that min may not be 1.
→47 The declaration for the getGuess method accepts the min and max
	parameters.
→52 The if statement in the getGuess method uses the min and max values
	to validate the user’s input.
→59 This line is the return statement for the getGuess method. Note that this
	return statement is in the else part of an if statement that checks
	whether the number is less than 1 or greater than 10. If the number is
	outside the acceptable range, the return statement isn’t executed.
	Instead, the program displays an error message, and the while loop
	repeats.
→63 The askForAnotherRound method accepts a string variable to use as a
	prompt.
	
	
	
	
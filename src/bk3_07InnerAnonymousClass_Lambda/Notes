
Inner classes, Static inner classes, & Anonymous inner classes.
===============================================================
	:: All three types are useful in certain circumstances. 
	:: In particular, inner classes and anonymous inner classes are commonly used with graphical applications created with Swing.
	
	Declaring Inner Classes
	-----------------------
		::An inner class is a class that’s declared inside another class.
		
			class outerClassName
			{
				private class innerClassName
				{
				// body of inner class
				}
			}
		:: Visibility modifiers can be used (public, protected, or private) which determines whether other classes can see the inner class
		
	Understanding inner classes
	----------------------------
		:: An inner class automatically has access to all the fields and methods of the outer class, even to private fields and methods. 
		   Thus an inner class has more access to its outer class than a subclass has to its superclass. (A subclass can access public and 
		   protected members of its superclass, but not private members.)
		:: An inner class carries with it a reference to the current instance of the outer class that enables it to access instance data for
		   the outer class. 
		:: Because of the outer-class instance reference, you can’t create or refer to an inner class from a static method of the outer class.
		   instead. you can create a static inner class.
		:: One of the main reasons for creating an inner class is to create a class-that’s of interest only to the outer class. As a result, 
		   you usually declare inner classes to be private so that other classes can’t access them.
		:: Occasionally, code in an inner class needs to refer to the instance of its outer class. To do that, you list the name of the outer 
		   class followed by the dot operator and (this). If the outer class is named MyOuterClass, for example, you would use MyOuterClass.this 
		   to refer to the instance of the outer class.
		   
		   THE OBSERVER PATTERN
		   ----------------------
			Event listeners in Java are part of a Java model called the Delegation Event Model, which is an implementation of a more general 
			design pattern called the Observer pattern. This pattern is useful when you need to create objects that interact with one another when
			a change in the status of one of the objects occurs. The object whose changes are being monitored is called the observable object, 
			and the object that monitors those changes is called the observer object. The observer object registers itself with the observable object,
			which then notifies the observer object when its status changes.			
			***Example Code: TickTockInner.java***
			
	Using Static Inner Classes
	---------------------------
		:: A static inner class is similar to an inner class but doesn’t require an instance of the outer class.
			
			class outerClassName
			{
				private static class innerClassName
				{
					// body of inner class
				}
			}
			
		:: Like a static method, a static inner class can’t access any nonstatic fields or methods in its outer class. It can only access static fields or methods.			
			***Example code: TickTockStatic.java***
		
	Using Anonymous Inner Classes
	------------------------------
		:: An anonymous class is a class that’s defined on the spot, right at the point where you want to instantiate it. 
		   Because you code the body of the class right where you need it, you don’t have to give it a name. 
		   (That’s why it’s called an anonymous class.)
	
			new ClassOrInterface() { class-body }
			
		:: As you can see, you specify the new keyword followed by the name of a class or interface that specifies the type of the object created from the
		   anonymous class. This class or interface name is followed by parentheses, which may include a parameter list that’s passed to the constructor of 
		   the anonymous class. Then you code a class body enclosed in braces. This class body can include anything that a regular class body can include: 
		   fields, methods, and even other classes or interfaces.   
	
		:: You can’t create a constructor for an anonymous class, because the anonymous class doesn’t have a name. 
		:: You can’t pass parameters if the anonymous class is based on an interface. That makes sense; interfaces don’t have constructors, so Java wouldn’t have
		   anything to pass the parameters to.
		:: An assignment statement can use an anonymous class. The anonymous class body is followed by a semicolon that marks the end of the assignment statement. 
		   Note that this semicolon is part of the assignment statement, not the anonymous class. 
		:: An anonymous class is a special type of inner class; like any inner class, it automatically has access to the fields and methods of its outer class.
		:: An anonymous class can’t be static.
			***Example code: TickTockAnonymous.java***
	
	Using Lambda Expressions
	-------------------------
		:: a lambda expression lets you create an anonymous class that implements a specific type of interface called a functional interface — which has one and 
		   only one abstract method.
		    example: interface Ball
						{
						void hit();
						}
						
		:: A functional interface can contain additional methods, provided they are not abstract.
		:: In Java 8 you can create default methods which provide a default implementation, not possible before Java 8.
		:: A lambda expression is a concise way to create an anonymous class that implements a functional interface.
		:: Instead of providing a formal method declaration that includes the return type, method name, parameter types, and method body,
		   you simply define the parameter types and the method body.
		:: The Java compiler infers the rest based on the context in which you use the lambda expression
		:: The parameter types are separated from the method body by a new operator, called the arrow operator.
		
			() -> { System.out.println("You hit it!");}
		
		:: Here the lambda expression implements a functional interface whose single method does not accept parameters.
		:: You can use a lambda expression anywhere you can use a normal Java expression.
		:: Used most in assignment statements or as passed parameters.
		:: Use a lambda expression only in a context that requires an instance of a functional interface.
		
			lambda Syntax : (parameters) -> expression
							(parameters) -> { statement;...}
							
		:: If you use an expression, a semicolon is not required. If you use one or more statements, the statements must be enclosed in curly braces and a semicolon
		   is required at the end of each statement.
		:: The statement in which you use the lambda expression must itself end with a semicolon.
			
			Ball b = () -> { System.out.println("You hit it!"); };
			
		:: The first semicolon marks the end of the statement that calls System.out.println(); the second semicolon marks the end of the assignment statement that
		   assigns the lambda expression to the variable b.
		   		***Example code: LambdaBall.java***
		   		
		   
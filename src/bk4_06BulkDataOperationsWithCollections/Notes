
Using Bulk Data Operations with Collections
===========================================
	:: At the heart of the bulk data operations feature is a new type of object called a stream, defined by the stream interface
	:: A stream is simply a sequence of elements of any data type which can be processed sequentially or in parallel
	:: The stream interface provides methods that let you perform various operations such as filtering the elements or performing an operation on each of the elements.
	:: The stream interface is different from the File streams which are used to read and write data to disk files
	:: The streams described in this chapter are used to process data extracted from collection classes
	:: Streams rely on the use of lambda expressions to pass the operations that are performed on stream elements.
	
	Looking At a Basic Bulk Data Operation
	---------------------------------------
	:: All of the classes that inherit from java.Collection implement a stream method that returns a Stream object. 
		
		default Stream<E>	stream()
		
	:: Returns a sequential Stream with this collection instance as its source.
	
		default Stream<E>	parallelStream()
		
	:: Returns a possibly parallel Stream with this collection instance as its source.
	
	:: The term pipeline is often used to describe a sequence of method calls that start by creating a stream, then manipulate the stream in various ways by 
	   calling methods such as filter, and finally end by calling a method that does not return another stream object, such as forEach.
	   
	Looking Closer at the Stream Interface
	--------------------------------------
	:: The Stream interface defines about 40 methods. In addition, three related interfaces — DoubleStream, IntStream, and LongStream — extend the Stream
	   interface to define operations that are specific to a single date type: double, int, and long.
	   
	   ***Method() list: TheStreamInterface.png***
	   
	:: The first group of methods in TheStreamInterface.png define methods that return other Stream objects. Each of these methods manipulates the stream in some way, 
	   then passes the altered stream down the pipeline to be processed by another operation.

	:: The filter method is one of the most commonly used stream methods. It’s argument, called a predicate, is a function that returns a boolean value. 
	   The function is called once for every element in the stream and is passed a single argument that contains the element under question. If the method 
	   returns true, the element is passed on to the result stream. If it returns false, the element is not passed on.

	:: The easiest way to implement a filter predicate is to use a lambda expression that specifies a conditional expression. For example, the following 
	   lambda expression inspects the name field of the stream element and returns true if it begins with the letter a (upper- or lowercase):
	   
	   		s -> s.name.toLowerCase().startsWith("a")
	   		
	:: The other methods in the first group let you limit the number of elements in a stream or sort the elements of the stream. To sort a stream, you can 
	   use either the element’s natural sorting order, or you can supply your own comparator function.
	   
	:: The second group of methods in TheStreamInterface.png are called mapping methods because they convert a stream whose elements are of one type to a stream whose elements
	   are of another type. The mapping function, which you must pass as a parameter, is responsible for converting the data from the first type to the second.
	   
	:: One common use for mapping methods is to convert a stream of complex types to a stream of simple numeric values of type double, int, or long, which you
	   can then use to perform an aggregate calculation such as sum or average. For example, suppose HP’s spells were for sale and the Spell class included a public
	   field named price. To calculate the average price of all the spells, you would first have to convert the stream of Spell objects to a stream of doubles. To do that,
	   you use the mapToDouble method. The mapping function would simply return the price field:
	   
	   			.mapToDouble(s -> s.price)
	   			
	:: Methods in the last group in TheStreamInterface1.png are called terminal methods because they do not return another stream. 
	   As a result, they are always the last methods called in stream pipelines.
	   
	:: the forEach method provides a function that is called once for each element in the stream
	
	:: Aggregate methods perform a calculation on all of the elements in the stream, then return the result. Of the aggregate methods, count is straightforward: It
	   simply returns the number of elements in the stream. The other aggregate methods need a little explanation because they return an optional data type. 
	   An optional data type is an object that might contain a value, or it might not.
	   
	:: For example, the average method calculates the average value of a stream of integers, longs, or doubles and returns the result as an OptionalDouble. 
	   If the stream was empty, the average is undefined, so the OptionalDouble contains no value. You can determine if the OptionalDouble contains a value by 
	   calling its isPresent method, which returns true if there is a value present. If there is a value, you can get it by calling the getAsDouble method.
	   
	:: Note that getAsDouble will throw an exception if no value is present, so you should always call isPresent before you call getAsDouble.
	
	:: Here’s an example that calculates the average price of spells:
	
			OptionalDouble avg = spells.stream().mapToDouble(s -> s.price).average();
	   
	:: Here is how you would write the average price to the console:
	   
	   			if (avg.isPresent())
				{
					System.out.println("Average = "
					+ avg.getAsDouble());
				}
	   
	Using Parallel Streams
	-----------------------
	:: Streams come in two basic flavors: sequential and parallel. Elements in a sequential stream are produced by the stream method and create streams that 
	   are processed one element after the next. Parallel streams, in contrast, can take full advantage of multicore processors by breaking its elements into 
	   two or more smaller streams, performing operations on them, and then recombining the separate streams to create the final result stream. Each of the 
	   intermediate streams can be processed by a separate thread, which can improve performance for large streams.
	   
	:: By default, streams are sequential. But creating a parallel stream is easy: Just use the parallelStream method instead of the stream method at the 
	   beginning of the pipeline.
	   
	:: Note that when you use a parallel stream, you can’t predict the order in which each element of the stream is processed. That’s because when the stream is 
	   split and run on two or more threads, the order in which the processor executes the threads is not predictable.
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
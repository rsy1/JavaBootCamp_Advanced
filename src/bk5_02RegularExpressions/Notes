
Regular Expressions
=======================
:: Regular expression is a special type of pattern-matching string that can be very useful for programs that do string manipulation. 
:: Regular expression strings contain special pattern-matching characters that can be matched against another string to see whether the other string fits the pattern
:: Regular expressions are very handy for doing complex data validation — for making sure that users enter properly formatted phone numbers, email addresses, or Social Security numbers
:: Regular expressions are constructed in a simple but powerful mini-language, so they’re like little programs unto themselves.

		Creating a Program for Experimentingwith Regular Expressions
		------------------------------------------------------------
				***Reg.java***
		
		Performing Basic Character Matching
		-----------------------------------
		:: Most regular expressions simply match characters to see whether a string complies with a simple pattern.
		:: You can check a string to see whether it matches the format for Social Security numbers (xxx-xx-xxxx), phone numbers [(xxx) xxx-xxxx], 
		   or more complicated patterns such as email addresses.
		   
		Matching single characters
		---------------------------
		:: Find out how to create regex patterns for basic character matching
		
				Enter regex: abc
				Enter string: abc
				Match.
				Enter string: abcd
				Does not match.
				
		:: Here the pattern abc matches the string abc but not abcd.
		
		Using predefined character classes
		-----------------------------------
		:: A character class represents a particular type of character rather than a specific character.
		:: A regex pattern lets you use two types of character classes: predefined classes and custom classes
		
				***PredefinedCharacterClasses.png***	
				
		:: The period is like a wildcard that matches any character, as in this example
		
				Enter regex: c.t
				Enter string: cat
				Match.
				Enter string: cot
				Match.
				Enter string: cart
				Does not match.
				
		:: Here c.t matches any three-letter string that starts with c and ends with t. In this example, the first two strings (cat and cot) match, but the third 
		   string (cart) doesn’t because it’s more than three characters.
		
		:: The \d class represents a digit and is often used in regex patterns to validate input data.
		:: Here’s a simple regex pattern that validates a U.S. Social Security number, which must be entered in the form xxx-xx-xxxx:
		
				Enter regex: \d\d\d-\d\d-\d\d\d\d
				Enter string: 779-54-3994
				Match.
				Enter string: 550-403-004
				Does not match.
		   
		:: Here the regex pattern specifies that the string must contain three digits, a hyphen, two digits, another hyphen, and four digits.
		
		   	***For further patterns, refer to book pg 510-512***
		
		Using custom character classes
		-------------------------------   
		:: To create a custom character class, you simply list all the characters that you want to include in the class within a set of square brackets.
		   
			   	Enter regex: b[aeiou]t
				Enter string: bat
				Match.
				Enter string: bet
				Match.
				Enter string: bit
				Match.
				Enter string: bot
				Match.
				Enter string: but
		  		Match.
				Enter string: bmt
				Does not match.
		   
		:: The pattern including uppercase letters as well as lowercase letters
		
				Enter regex: b[aAeEiIoOuU]t
				Enter string: bat
				Match.
				Enter string: BAT
				Does not match.
				Enter string: bAt
				Match.
		   
		:: The next pattern specifies three character classes. The first can be b or B, the second can be any uppercase or lowercase vowel, and the third can be t or T.
		
				Enter regex: [bB][aAeEiIoOuU][tT]
				Enter string: bat
				Match.
				Enter string: BAT
				Match.
		   
		   
		Using ranges
		---------------
		:: Custom character classes can also specify ranges of letters and numbers.
		
				Enter regex: [a-z][0-5]
				Enter string: r2
				Match.
				Enter string: b9
				Does not match.
				
		:: Here the string can be two characters long. The first must be a character from a–z, and the second must be 0–5.
		
		:: You can also use more than one range in a class
		
				Enter regex: [a-zA-Z][0-5]
				Enter string: r2
				Match.
				Enter string: R2
				Match.
				
		:: Above the first character can be lowercase a–z or uppercase A–Z.
		
		:: You can use ranges to build a class that accepts only characters that appear in real words (as opposed to the \w class, which allows underscores):
				
				Enter regex: [a-zA-Z0-9]
				Enter string: a
				Match.
				Enter string: N
				Match.
				Enter string: 9
				Match.
				
		Using negation
		-----------------
		:: Regular expressions can include classes that match any character but the ones listed for the class. To do that, you start the class with a caret.
		
				Enter regex: [^cf]at
				Enter string: bat
				Match.
				Enter string: cat
				Does not match.
				Enter string: fat
				Does not match.
				
		:: Here the string must be a three-letter word that ends in at but isn’t fat or cat.
		
		Matching multiple characters
		----------------------------
		:: Quantifiers let you create patterns that match a variable number of characters at a certain position in the string.
		:: To use a quantifier, you code it immediately after the element you want it to apply to.
		
				Enter regex: \d{3}-\d{2}-\d{4}
				Enter string: 779-48-9955
				Match.
				Enter string: 483-488-9944
				Does not match.
				
		:: The pattern matches three digits, followed by a hyphen, followed by two digits, followed by another hyphen, followed by four digits.
		:: Simply duplicating elements rather than using a quantifier is just as easy, if not easier. \d\d is just as easy as \d{2}.
		:: The ? quantifier lets you create an optional element that may or may not be present in the string
		
				Enter regex: \d{3}-?\d{2}-?\d{4}
				Enter string: 779-48-9955
				Match.
				Enter string: 779489955
				Match.
				Enter string: 779-489955
				Match.
				Enter string: 77948995
				Does not match.
		
		:: The question marks indicate that the hyphens are optional.
		:: This pattern above lets you include or omit either hyphen. 
		:: The last string entered doesn’t match because it has only eight digits, and the pattern requires nine.
		
		Using escapes
		---------------
		:: In regular expressions, certain characters have special meaning. What if you want to search for one of those special characters?
		:: In that case, you escape the character by preceding it with a backslash.
		
				Enter regex: \(\d{3}\) \d{3}-\d{4}
				Enter string: (559) 555-1234
				Match.
				Enter string: 559 555-1234
				Does not match.
				
		:: Here \( represents a left parenthesis, and \) represents a right parenthesis. Without the backslashes, the regular expression treats the parenthesis as a grouping element.
		:: Strictly speaking, you need to use the backslash escape only for characters that have special meanings in regular expressions. I recommend, however,
		   that you escape any punctuation character or symbol, just to be sure.
		:: You can’t escape alphabetic characters (letters) because a backslash followed by certain alphabetic characters represents a character, a class, or some other
		   regex element.
		:: To escape a backslash, code two slashes in a row. The regex \d\d\\\d\d, for example, accepts strings made up of two digits followed by a backslash and
		   two more digits, such as 23\88 and 95\55.
		   
		Using parentheses to group characters
		--------------------------------------
		:: You can use parentheses to create groups of characters to apply other regex elements to,
		
				Enter regex: (bla)+
				Enter string: bla
				Match.
				Enter string: blabla
				Match.
				Enter string: blablabla
				Match.
				Enter string: bla bla bla
				Does not match.
				
		:: Here the parentheses treat bla as a group, so the + quantifier applies to the entire sequence. Thus, this pattern looks for one or more occurrences of
		   the sequence bla.
		   
		:: Here’s an example that finds U.S. phone numbers that can have an optional area code:
				
				Enter regex: (\(\d{3}\)\s?)?\d{3}-\d{4}
				Enter string: 555-1234
				Match.
				Enter string: (559) 555-1234
				Match.
				Enter string: (559)555-1239
				Match.
				
		:: This regex pattern is a little complicated
		:: It starts with a group that indicates the optional area code: (\(\d{3}\)\s?)?.
		:: This group begins with the left parenthesis, which marks the start of the group. 
		:: The characters in the group consist of an escaped left parenthesis, three digits, an escaped right parenthesis, and an optional white-space character. 
		:: Then a right parenthesis closes the group, and the question mark indicates that the entire group is optional. 
		:: The rest of the regex pattern looks for three digits followed by a hyphen and four more digits
		:: When you mark a group of characters with parentheses, the text that matches that group is captured so that you can use it later in the pattern. 
		:: The groups that are captured are called capture groups and are numbered beginning with 1. 
		:: Then you can use a backslash followed by the capture-group number to indicate that the text must match the text that was captured for the specified 
		   capture group. 
		   
		:: Suppose that droids named following the pattern \w\d-\w\d must have the same digit in the second and fifth characters. In other words, r2-d2 and b9-k9 
		   are valid droid names, but r2-d4 and d3-r4 are not.
		
				Enter regex: \w(\d)-\w\1
				Enter string: r2-d2
				Match.
				Enter string: d3-r4
				Does not match.
				Enter string: b9-k9
				Match
				
		:: Here \1 refers to the first capture group. Thus the last character in the string must be the same as the second character, which must be a digit.
		
		Using the pipe symbol
		-----------------------
		:: The vertical bar (|) symbol defines an or operation, which lets you create patterns that accept any of two or more variations.
		
				Enter regex: (\w\d-\w\d)|(\w-\d\w\w)
				Enter string: r2-d2
				Match.
				Enter string: c-3po
				Match.
				
		:: The | character indicates that either the group on the left or the group on the right can be used to match the string.
		:: The group on the left matches a word character, a digit, a hyphen, a word character, and another digit.
		:: The group on the right matches a word character, a hyphen, a digit, and two word characters.
		
		:: You may want to use an additional set of parentheses around the entire part of the pattern that the | applies to. Then you can add pattern elements 
		   before or after the | groups. 
		:: What if you want to let a user enter the area code for a phone number with or without parentheses? Here’s a regex pattern that does the trick
		
				Enter regex: ((\d{3} )|(\(\d{3}\) ))?\d{3}-\d{4}
				Enter string: (559) 555-1234
				Match.
				Enter string: 559 555-1234
				Match.
				Enter string: 555-1234
				Match.
				
		:: The first part of this pattern is a group that consists of two smaller groups separated by a | character. The first of these groups matches an area code without
		   parentheses followed by a space, and the second matches an area code with parentheses followed by a space. 
		:: So the outer group matches an area code with or without parentheses. This entire group is marked with a question mark as optional; 
		   then the pattern continues with three digits, a hyphen, and four digits.
		   
		   
	Using Regular Expressions in Java Programs
	-------------------------------------------
		:: Puting the above created Regex to use in Java
		
		Understanding the String problem
		---------------------------------
		:: regex patterns rely on the backslash character to mark different elements of a pattern
		:: The bad news is that Java treats the backslash character in a string literal as an escape character.
		:: Thus, you can’t just quote regular expressions in string literals, because Java steals the backslash characters before they get to the regular expression classes.
		:: The statement below will not compile
		   
		   		String regex = "\w\d-\w\d";
				
		:: The compiler sees the backslashes in the string and expects to find a valid Java escape sequence, not a regular expression.
		:: The ugly solution, double the backslashes wherever they occur. Java treats two backslashes in a row as an escaped backslash and places a single backslash in the string
				
				String regex = "\\w\\d-\\w\\d";
				
		:: Now will compile, each backslash I want in the regular expression is coded as a pair of backslashes in the string literal
		
		Using regular expressions with the String class
		-------------------------------------------------
		:: If all you want to do with a regular expression is check whether a string matches a pattern, you can use the matches method of the String class. 
		:: This method accepts a regular expression as a parameter and returns a boolean that indicates whether the string matches the pattern.
		:: A static method that validates droid names:

				private static boolean validDroidName(String droid)
				{
					String regex = "(\\w\\d-\\w\\d)|(\\w-\\d\\w\\w)";
					return droid.matches(regex);
				}		
				
		:: Here the name of the droid is passed via a parameter, and the method returns a boolean that indicates whether the droid’s name is valid. The method 
		   simply creates a regular expression from a string literal and then uses the matches method of the droid string to match the pattern.
		   
		:: You can also use the split method to split a string into an array of String objects based on delimiters that match a regular expression. 
		   One common way to do that is to simply create a custom class of characters that can be used for delimiters
		   
		   		String s = "One:Two;Three|Four\tFive";
				String regex = "[:;|\\t]";
				String strings[] = s.split(regex);
				for (String word : strings)
				System.out.println(word);
				
		:: Above, a string is split into words marked by colons, semicolons, vertical bars, or tab characters
				
				One
				Two
				Three
				Four
				Five
				
				
		Using the Pattern and Matcher classes
		---------------------------------------
		:: The matches method is fine for occasional use of regular expressions, but if you want your program to do a lot of pattern matching, 
		   you should use the Pattern and Matcher classes instead.
		:: The Pattern class represents a regular expression that has been compiled into executable form
		:: Then you can use the compiled Pattern object to create a Matcher object, which you can use to match strings.
		
		::   Pattern class common methods
		
				>>static Pattern compile(String pattern): 
					Compiles the specified pattern. This static method returns a Pattern object. It throws PatternSyntax Exception if the pattern contains an error.
				>>Matcher matcher (String input): 
					Creates a Matcher object to match this pattern against the specified string.  
					
		:: First, you use the compile method to create a Pattern object 
		:: Pattern class relies on the static compile() method to create an instances.
		:: must use a try/catch statement to catch PatternSyntaxException
		
		:: After you have a Pattern instance, you use the matcher method to create an instance of the Matcher class
		:: Call matches method: static boolean matches() which returns a boolean that indicates whether the entire string matches the pattern
		
				private static Pattern droidPattern;
				private static boolean validDroidName(String droid)
				{
					if (droidPattern == null)
					{
						String regex = "(\\w\\d-\\w\\d)|"
						+ "(\\w-\\d\\w\\w)";
						droidPattern = Pattern.compile(regex);
					}
					Matcher m = droidPattern.matcher(droid);
					return m.matches();
				}
				
		:: Here the private class field droidPattern saves the compiled pattern for validating droids. 
		:: The if statement in the validDroidName method checks whether the pattern has already been created. 
		:: If not, the pattern is created by calling the static compile method of the Pattern class. 
		:: Then the matcher method is used to create a Matcher object for the string passed as a parameter, and the string is validated
		   by calling the matches method of the Matcher object.
		   
		